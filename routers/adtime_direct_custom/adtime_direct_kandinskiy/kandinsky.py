import base64
import json
import logging
import os
import time

import requests
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, BufferedInputFile
)
from dotenv import load_dotenv

from config import settings
from keyboards.on_start import ButtonText
from routers.common.states import MainStates

logger = logging.getLogger(__name__)
router = Router(name=__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
FUSION_BRAIN_TOKEN = os.getenv('FUSION_BRAIN_TOKEN')
FB_KEY = os.getenv('FB_KEY')

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
logger.info(f"FUSION_BRAIN_TOKEN loaded: {FUSION_BRAIN_TOKEN is not None}")
logger.info(f"FB_KEY loaded: {FB_KEY is not None}")


class KandinskyStates(StatesGroup):
    TextToImage = State()
    ReviewImage = State()


class Text2ImageAPI:
    def __init__(self, api_key, secret_key):
        self.API_URL = "https://api-key.fusionbrain.ai/"
        self.HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }
        logger.info(f"Initialized Text2ImageAPI with URL: {self.API_URL}")

    def get_pipeline(self):
        try:
            logger.info("Trying to get pipeline...")
            response = requests.get(
                f"{self.API_URL}key/api/v1/pipelines",
                headers=self.HEADERS,
                timeout=(10, 30)  # –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ
            )

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"Response status: {response.status_code}")
            logger.info(f"Response headers: {response.headers}")

            response.raise_for_status()
            data = response.json()
            logger.info(f"Pipelines response: {data}")

            if not data:
                logger.error("No pipelines available")
                return None

            return data[0]['id']

        except requests.exceptions.RequestException as e:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ requests
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"HTTP Error {e.response.status_code}: {e.response.text}")
            else:
                logger.error(f"Connection error: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error in get_pipeline: {str(e)}", exc_info=True)
            return None

    def generate(self, prompt, pipeline, images=1, width=1024, height=1024):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": f"{prompt}"
            }
        }

        data = {
            'pipeline_id': (None, pipeline),
            'params': (None, json.dumps(params), 'application/json')
        }

        try:
            logger.info(f"Generating image with prompt: {prompt}")
            response = requests.post(
                f"{self.API_URL}key/api/v1/pipeline/run",
                headers=self.HEADERS,
                files=data,
                timeout=(10, 30),
            )

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"Generate response status: {response.status_code}")

            response.raise_for_status()
            data = response.json()
            logger.info(f"Generate response data: {data}")
            return data['uuid']

        except requests.exceptions.RequestException as e:
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"HTTP Error {e.response.status_code}: {e.response.text}")
            else:
                logger.error(f"Connection error: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error in generate: {str(e)}", exc_info=True)
            return None

    def check_status(self, request_id, attempts=10, delay=3):  # –£–º–µ–Ω—å—à–∏–ª–∏ delay —Å 10 –¥–æ 3 —Å–µ–∫
        while attempts > 0:
            try:
                logger.info(f"Checking status for request {request_id} (attempts left: {attempts})")

                response = requests.get(
                    f"{self.API_URL}key/api/v1/pipeline/status/{request_id}",
                    headers=self.HEADERS,
                    timeout=(3, 5),  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —á—Ç–µ–Ω–∏—è
                )

                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                logger.info(f"Status check response: {response.status_code}")
                logger.debug(f"Status headers: {response.headers}")

                data = response.json()
                logger.info(f"Status data: {data}")

                if data['status'] == 'DONE':
                    logger.info("Generation completed successfully")
                    return data['result']['files'][0]
                elif data['status'] == 'FAIL':
                    error_desc = data.get('errorDescription', 'No error description')
                    logger.error(f"Generation failed: {error_desc}")
                    return None

                attempts -= 1
                time.sleep(delay)

            except requests.exceptions.RequestException as e:
                if hasattr(e, 'response') and e.response is not None:
                    logger.error(f"HTTP Error {e.response.status_code}: {e.response.text}")
                else:
                    logger.error(f"Connection error: {str(e)}")
                attempts -= 1
                time.sleep(delay)
            except Exception as e:
                logger.error(f"Unexpected error in check_status: {str(e)}", exc_info=True)
                attempts -= 1
                time.sleep(delay)

        logger.error("All attempts to check status failed")
        return None


def get_kandinsky_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def get_review_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")],
            [KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


@router.message(F.text == ButtonText.KANDINSKY)
async def handle_kandinsky(message: types.Message):
    try:
        logger.info("Checking Kandinsky API availability...")
        test_response = requests.get(
            "https://api-key.fusionbrain.ai/key/api/v1/pipelines",
            headers={
                'X-Key': f'Key {FUSION_BRAIN_TOKEN}',
                'X-Secret': f'Secret {FB_KEY}',
            },
            timeout=10,
        )
        logger.info(f"API check response: {test_response.status_code}")
        if test_response.status_code == 200:
            logger.info("Kandinsky API is available")
            await message.answer("–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ: /start_kandinsky")
        else:
            error_msg = f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {test_response.status_code}"
            logger.error(error_msg)
            raise Exception(error_msg)
    except Exception as e:
        logger.error(f"Error checking Kandinsky API: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )


@router.message(Command("start_kandinsky"))
async def start_kandinsky(message: types.Message, state: FSMContext):
    await state.set_state(KandinskyStates.TextToImage)
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=get_kandinsky_keyboard()
    )


@router.message(F.text == "–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", KandinskyStates.TextToImage)
async def request_prompt(message: Message, state: FSMContext):
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å:",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(KandinskyStates.TextToImage)
async def generate_image(message: Message, state: FSMContext):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if message.text in ["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]:
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤—ã—Ö–æ–¥–∏–º
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        from keyboards.on_start import get_on_start_kb
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_on_start_kb()
        )
        await state.set_state(MainStates.main_menu)
        return

    prompt = message.text
    if not prompt:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")

    api = Text2ImageAPI(FUSION_BRAIN_TOKEN, FB_KEY)
    pipeline_id = api.get_pipeline()
    if not pipeline_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipeline.")
        return

    task_id = api.generate(prompt, pipeline_id)
    if not task_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        return

    image_base64 = api.check_status(task_id)
    if not image_base64:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        return

    try:
        image_data = base64.b64decode(image_base64)
        await message.answer_photo(
            BufferedInputFile(image_data, "generated_image.jpg"),
            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{prompt}'"
        )

        await state.update_data(
            generated_image=image_data,
            prompt=prompt
        )

        await message.answer(
            "–ù—Ä–∞–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
            reply_markup=get_review_keyboard()
        )
        await state.set_state(KandinskyStates.ReviewImage)
    except Exception as e:
        logger.error(f"Error sending image: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


@router.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", KandinskyStates.ReviewImage)
async def regenerate_image(message: Message, state: FSMContext):
    data = await state.get_data()
    prompt = data.get("prompt", "")

    if not prompt:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(KandinskyStates.TextToImage)
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await message.answer(
        f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: '{prompt}'",
        reply_markup=ReplyKeyboardRemove()
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    api = Text2ImageAPI(FUSION_BRAIN_TOKEN, FB_KEY)
    pipeline_id = api.get_pipeline()
    if not pipeline_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipeline.")
        return

    task_id = api.generate(prompt, pipeline_id)
    if not task_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        return

    image_base64 = api.check_status(task_id)
    if not image_base64:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        return

    try:
        image_data = base64.b64decode(image_base64)
        await message.answer_photo(
            BufferedInputFile(image_data, "generated_image.jpg"),
            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{prompt}'"
        )

        await state.update_data(
            generated_image=image_data,
            prompt=prompt
        )

        await message.answer(
            "–ù—Ä–∞–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
            reply_markup=get_review_keyboard()
        )
        await state.set_state(KandinskyStates.ReviewImage)
    except Exception as e:
        logger.error(f"Error sending image: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", KandinskyStates.ReviewImage)
async def send_to_admin(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    image_data = data.get("generated_image")
    prompt = data.get("prompt", "")

    if image_data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
        admin_caption = (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in settings.admin_ids:
            try:
                await bot.send_photo(
                    admin_id,
                    BufferedInputFile(image_data, "image.jpg"),
                    caption=admin_caption
                )
            except Exception as e:
                logger.error(f"Error sending to admin {admin_id}: {e}")

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from keyboards.on_start import get_on_start_kb
        await message.answer(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_on_start_kb()
        )
        await state.clear()
        await state.set_state(MainStates.main_menu)
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è Kandinsky
@router.message(F.text == "–ù–∞–∑–∞–¥")
async def handle_back_kandinsky(message: Message, state: FSMContext):
    from keyboards.on_start import get_on_start_kb
    await state.clear()
    await state.set_state(MainStates.main_menu)
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_on_start_kb()
    )
