import base64
import json
import logging
import os
import time

import requests
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, BufferedInputFile
)
from dotenv import load_dotenv

from config import settings
from keyboards.on_start import ButtonText
from routers.common.states import MainStates

logger = logging.getLogger(__name__)
router = Router(name=__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
FUSION_BRAIN_TOKEN = os.getenv('FUSION_BRAIN_TOKEN')
FB_KEY = os.getenv('FB_KEY')


class KandinskyStates(StatesGroup):
    TextToImage = State()
    ReviewImage = State()


class Text2ImageAPI:
    def __init__(self, api_key, secret_key):
        self.API_URL = "https://api-key.fusionbrain.ai/"
        self.HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

    def get_pipeline(self):
        try:
            response = requests.get(
                f"{self.API_URL}key/api/v1/pipelines",
                headers=self.HEADERS,
                timeout=10
            )
            response.raise_for_status()
            data = response.json()
            logger.info(f"Pipelines response: {data}")
            if not data:
                logger.error("No pipelines available")
                return None
            return data[0]['id']
        except Exception as e:
            logger.error(f"Error getting pipeline: {e}")
            return None

    def generate(self, prompt, pipeline, images=1, width=1024, height=1024):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": f"{prompt}"
            }
        }

        data = {
            'pipeline_id': (None, pipeline),
            'params': (None, json.dumps(params), 'application/json')
        }

        try:
            response = requests.post(
                f"{self.API_URL}key/api/v1/pipeline/run",
                headers=self.HEADERS,
                files=data
            )
            response.raise_for_status()
            data = response.json()
            logger.info(f"Generate response: {data}")
            return data['uuid']
        except Exception as e:
            logger.error(f"Error generating image: {e}")
            return None

    def check_status(self, request_id, attempts=10, delay=10):
        while attempts > 0:
            try:
                response = requests.get(
                    f"{self.API_URL}key/api/v1/pipeline/status/{request_id}",
                    headers=self.HEADERS
                )
                data = response.json()
                logger.info(f"Status check: {data}")

                if data['status'] == 'DONE':
                    return data['result']['files'][0]
                elif data['status'] == 'FAIL':
                    logger.error(f"Generation failed: {data.get('errorDescription')}")
                    return None

                attempts -= 1
                time.sleep(delay)
            except Exception as e:
                logger.error(f"Error checking status: {e}")
                return None
        return None


def get_kandinsky_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def get_review_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")],
            [KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


@router.message(F.text == ButtonText.KANDINSKY)
async def handle_kandinsky(message: types.Message):
    await message.answer(
        "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ /start_kandinsky",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(Command("start_kandinsky"))
async def start_kandinsky(message: types.Message, state: FSMContext):
    await state.set_state(KandinskyStates.TextToImage)
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=get_kandinsky_keyboard()
    )


@router.message(F.text == "–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", KandinskyStates.TextToImage)
async def request_prompt(message: Message, state: FSMContext):
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ—Ç –≤ —à–ª—è–ø–µ'):",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(KandinskyStates.TextToImage)
async def generate_image(message: Message, state: FSMContext):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    if message.text in ["–ù–∞–∑–∞–¥", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]:
        return
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤—ã—Ö–æ–¥–∏–º
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        from keyboards.on_start import get_on_start_kb
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_on_start_kb()
        )
        await state.set_state(MainStates.main_menu)
        return

    prompt = message.text
    if not prompt:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")

    api = Text2ImageAPI(FUSION_BRAIN_TOKEN, FB_KEY)
    pipeline_id = api.get_pipeline()
    if not pipeline_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipeline.")
        return

    task_id = api.generate(prompt, pipeline_id)
    if not task_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        return

    image_base64 = api.check_status(task_id)
    if not image_base64:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        return

    try:
        image_data = base64.b64decode(image_base64)
        await message.answer_photo(
            BufferedInputFile(image_data, "generated_image.jpg"),
            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{prompt}'"
        )

        await state.update_data(
            generated_image=image_data,
            prompt=prompt
        )

        await message.answer(
            "–ù—Ä–∞–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
            reply_markup=get_review_keyboard()
        )
        await state.set_state(KandinskyStates.ReviewImage)
    except Exception as e:
        logger.error(f"Error sending image: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


@router.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", KandinskyStates.ReviewImage)
async def regenerate_image(message: Message, state: FSMContext):
    data = await state.get_data()
    prompt = data.get("prompt", "")

    if not prompt:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(KandinskyStates.TextToImage)
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await message.answer(
        f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: '{prompt}'",
        reply_markup=ReplyKeyboardRemove()
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    api = Text2ImageAPI(FUSION_BRAIN_TOKEN, FB_KEY)
    pipeline_id = api.get_pipeline()
    if not pipeline_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipeline.")
        return

    task_id = api.generate(prompt, pipeline_id)
    if not task_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        return

    image_base64 = api.check_status(task_id)
    if not image_base64:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        return

    try:
        image_data = base64.b64decode(image_base64)
        await message.answer_photo(
            BufferedInputFile(image_data, "generated_image.jpg"),
            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{prompt}'"
        )

        await state.update_data(
            generated_image=image_data,
            prompt=prompt
        )

        await message.answer(
            "–ù—Ä–∞–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
            reply_markup=get_review_keyboard()
        )
        await state.set_state(KandinskyStates.ReviewImage)
    except Exception as e:
        logger.error(f"Error sending image: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", KandinskyStates.ReviewImage)
async def send_to_admin(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    image_data = data.get("generated_image")
    prompt = data.get("prompt", "")

    if image_data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
        admin_caption = (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in settings.admin_ids:
            try:
                await bot.send_photo(
                    admin_id,
                    BufferedInputFile(image_data, "image.jpg"),
                    caption=admin_caption
                )
            except Exception as e:
                logger.error(f"Error sending to admin {admin_id}: {e}")

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from keyboards.on_start import get_on_start_kb
        await message.answer(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_on_start_kb()
        )
        await state.clear()
        await state.set_state(MainStates.main_menu)
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.message(F.text == "–ù–∞–∑–∞–¥", KandinskyStates.ReviewImage)
async def back_from_review(message: Message, state: FSMContext):
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from keyboards.on_start import get_on_start_kb
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_on_start_kb()
    )
    await state.set_state(MainStates.main_menu)
